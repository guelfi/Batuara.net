#!/bin/bash

echo "üöÄ FRESH INSTALL - SERVIDOR ORACLE"
echo "=================================="
echo "Data: $(date)"
echo "Servidor: $(hostname)"
echo ""

# Definir vari√°veis
PROJECT_DIR="/var/www/batuara_net"
REPO_URL="https://github.com/guelfi/Batuara.net.git"
BACKUP_DIR="/var/www/backups/$(date +%Y%m%d_%H%M%S)"

echo "üìã CONFIGURA√á√ïES:"
echo "- Diret√≥rio do projeto: $PROJECT_DIR"
echo "- Reposit√≥rio: $REPO_URL"
echo "- Backup ser√° salvo em: $BACKUP_DIR"
echo ""

# Parar todos os containers
echo "üõë Parando todos os containers..."
if [ -d "$PROJECT_DIR" ]; then
    cd "$PROJECT_DIR"
    docker-compose down 2>/dev/null || echo "Nenhum container rodando"
fi

# Fazer backup do diret√≥rio atual (se existir)
if [ -d "$PROJECT_DIR" ]; then
    echo "üíæ Fazendo backup do diret√≥rio atual..."
    mkdir -p "$(dirname "$BACKUP_DIR")"
    mv "$PROJECT_DIR" "$BACKUP_DIR"
    echo "‚úÖ Backup salvo em: $BACKUP_DIR"
else
    echo "‚ÑπÔ∏è  Diret√≥rio n√£o existe, n√£o h√° necessidade de backup"
fi

# Criar diret√≥rio pai se n√£o existir
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p "$(dirname "$PROJECT_DIR")"

# Clonar reposit√≥rio fresh
echo "üì• Clonando reposit√≥rio fresh do GitHub..."
cd "$(dirname "$PROJECT_DIR")"
if git clone "$REPO_URL" "$(basename "$PROJECT_DIR")"; then
    echo "‚úÖ Reposit√≥rio clonado com sucesso!"
else
    echo "‚ùå Erro ao clonar reposit√≥rio"
    echo "Tentando restaurar backup..."
    if [ -d "$BACKUP_DIR" ]; then
        mv "$BACKUP_DIR" "$PROJECT_DIR"
        echo "‚úÖ Backup restaurado"
    fi
    exit 1
fi

# Navegar para o diret√≥rio do projeto
cd "$PROJECT_DIR"

echo ""
echo "üîç VERIFICANDO ARQUIVOS CR√çTICOS:"
echo "---------------------------------"

# Verificar Dockerfile.frontend
if [ -f "Dockerfile.frontend" ]; then
    echo "‚úÖ Dockerfile.frontend encontrado"
    echo "Primeiras linhas:"
    head -5 Dockerfile.frontend
else
    echo "‚ùå Dockerfile.frontend N√ÉO encontrado"
fi

# Verificar docker-compose
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml encontrado"
elif [ -f "docker-compose-fixed.yml" ]; then
    echo "‚úÖ docker-compose-fixed.yml encontrado"
    COMPOSE_FILE="docker-compose-fixed.yml"
else
    echo "‚ùå Nenhum arquivo docker-compose encontrado"
fi

# Verificar assets do PublicWebsite
if [ -f "src/Frontend/PublicWebsite/public/favicon.ico" ]; then
    echo "‚úÖ favicon.ico encontrado no PublicWebsite"
else
    echo "‚ùå favicon.ico N√ÉO encontrado no PublicWebsite"
fi

if [ -f "src/Frontend/PublicWebsite/public/batuara_logo.png" ]; then
    echo "‚úÖ batuara_logo.png encontrado no PublicWebsite"
else
    echo "‚ùå batuara_logo.png N√ÉO encontrado no PublicWebsite"
fi

echo ""
echo "üßπ LIMPANDO CACHE DOCKER COMPLETO..."
echo "-----------------------------------"
docker system prune -af --volumes
docker builder prune -af

echo ""
echo "üèóÔ∏è CONSTRUINDO TODOS OS CONTAINERS FRESH..."
echo "-------------------------------------------"

# Determinar qual arquivo docker-compose usar
if [ -f "docker-compose-fixed.yml" ]; then
    COMPOSE_FILE="docker-compose-fixed.yml"
    echo "üìÑ Usando: docker-compose-fixed.yml"
elif [ -f "docker-compose.yml" ]; then
    COMPOSE_FILE="docker-compose.yml"
    echo "üìÑ Usando: docker-compose.yml"
else
    echo "‚ùå Nenhum arquivo docker-compose encontrado!"
    exit 1
fi

# Build completo sem cache
if docker-compose -f "$COMPOSE_FILE" build --no-cache; then
    echo "‚úÖ Build conclu√≠do com sucesso!"
else
    echo "‚ùå Erro no build"
    exit 1
fi

echo ""
echo "üöÄ INICIANDO TODOS OS SERVI√áOS..."
echo "--------------------------------"
if docker-compose -f "$COMPOSE_FILE" up -d; then
    echo "‚úÖ Servi√ßos iniciados com sucesso!"
else
    echo "‚ùå Erro ao iniciar servi√ßos"
    exit 1
fi

echo ""
echo "‚è≥ Aguardando inicializa√ß√£o completa..."
sleep 15

echo ""
echo "üîç VERIFICANDO STATUS DOS CONTAINERS:"
echo "------------------------------------"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üß™ TESTANDO ASSETS CR√çTICOS:"
echo "----------------------------"

# Testar favicon
echo "Testando favicon.ico:"
FAVICON_RESPONSE=$(curl -s -I http://localhost:3000/favicon.ico | head -n 1)
if echo "$FAVICON_RESPONSE" | grep -q "200"; then
    echo "‚úÖ favicon.ico: $FAVICON_RESPONSE"
else
    echo "‚ùå favicon.ico: $FAVICON_RESPONSE"
fi

# Testar logo
echo "Testando batuara_logo.png:"
LOGO_RESPONSE=$(curl -s -I http://localhost:3000/batuara_logo.png | head -n 1)
if echo "$LOGO_RESPONSE" | grep -q "200"; then
    echo "‚úÖ batuara_logo.png: $LOGO_RESPONSE"
else
    echo "‚ùå batuara_logo.png: $LOGO_RESPONSE"
fi

# Testar p√°gina principal
echo "Testando p√°gina principal:"
MAIN_RESPONSE=$(curl -s -I http://localhost:3000/ | head -n 1)
if echo "$MAIN_RESPONSE" | grep -q "200"; then
    echo "‚úÖ P√°gina principal: $MAIN_RESPONSE"
else
    echo "‚ùå P√°gina principal: $MAIN_RESPONSE"
fi

echo ""
echo "üìä RESUMO DO FRESH INSTALL:"
echo "=========================="
echo "‚úÖ Fresh install conclu√≠do!"
echo "üìÅ Backup anterior salvo em: $BACKUP_DIR"
echo "üåê Site dispon√≠vel em: http://129.153.86.168:3000"
echo "üîß AdminDashboard dispon√≠vel em: http://129.153.86.168:3001"
echo ""
echo "üéâ FRESH INSTALL FINALIZADO COM SUCESSO!"
echo "========================================"