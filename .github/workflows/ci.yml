name: Continuous Integration

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ develop, feature/* ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          src/Frontend/package-lock.json
          src/Frontend/PublicWebsite/package-lock.json
          src/Frontend/AdminDashboard/package-lock.json
        
    - name: Install .NET format tool
      run: dotnet tool install -g dotnet-format
      
    - name: Check .NET formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Install Frontend dependencies
      run: |
        cd src/Frontend
        npm ci
        
    - name: Lint Frontend code
      run: |
        cd src/Frontend
        npm run lint
        
    - name: Check Frontend formatting
      run: |
        cd src/Frontend
        npm run format:check

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release /p:Platform="Any CPU"

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          src/Frontend/package-lock.json
          src/Frontend/PublicWebsite/package-lock.json
          src/Frontend/AdminDashboard/package-lock.json
        
    - name: Install Frontend root dependencies
      run: |
        cd src/Frontend
        npm ci
        
    - name: Install PublicWebsite dependencies
      run: |
        cd src/Frontend/PublicWebsite
        npm ci
        
    - name: Install AdminDashboard dependencies
      run: |
        cd src/Frontend/AdminDashboard
        npm ci
        
    - name: Build PublicWebsite
      run: |
        cd src/Frontend/PublicWebsite
        npm run build
        
    - name: Build AdminDashboard
      run: |
        cd src/Frontend/AdminDashboard
        npm run build

  build-test-images:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build API Docker image
      run: |
        docker build -f Dockerfile.api -t batuara-api:test .
        
    - name: Build Frontend Docker image
      run: |
        docker build -f Dockerfile.frontend -t batuara-frontend:test .
        
    - name: Test Docker images
      run: |
        # Testar se as imagens foram criadas corretamente
        docker images | grep batuara
        
        # Testar se os containers iniciam corretamente
        docker run -d --name test-api -p 8080:8080 batuara-api:test
        docker run -d --name test-frontend -p 3000:80 batuara-frontend:test
        
        # Aguardar inicialização
        sleep 10
        
        # Verificar se os containers estão rodando
        docker ps
        
        # Limpar containers de teste
        docker stop test-api test-frontend
        docker rm test-api test-frontend
        docker rmi batuara-api:test batuara-frontend:test

  validate-deployment-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Docker Compose files
      run: |
        # Validar arquivos docker-compose
        for file in scripts/docker/*.yml; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            docker-compose -f "$file" config
          fi
        done
        
    - name: Validate Dockerfiles
      run: |
        # Verificar se os Dockerfiles existem e são válidos
        if [ -f "Dockerfile.api" ]; then
          echo "✅ Dockerfile.api encontrado"
        else
          echo "❌ Dockerfile.api não encontrado"
          exit 1
        fi
        
        if [ -f "Dockerfile.frontend" ]; then
          echo "✅ Dockerfile.frontend encontrado"
        else
          echo "❌ Dockerfile.frontend não encontrado"
          exit 1
        fi
        
    - name: Validate Oracle scripts
      run: |
        # Verificar se os scripts Oracle existem
        ORACLE_SCRIPTS=(
          "scripts/oracle/oracle-deploy-ready.sh"
          "scripts/oracle/diagnose-assets-oracle.sh"
          "scripts/oracle/clear-cache-oracle.sh"
        )
        
        for script in "${ORACLE_SCRIPTS[@]}"; do
          if [ -f "$script" ]; then
            echo "✅ $script encontrado"
            # Verificar se o script é executável
            if [ -x "$script" ]; then
              echo "✅ $script é executável"
            else
              echo "⚠️ $script não é executável, corrigindo..."
              chmod +x "$script"
            fi
          else
            echo "❌ $script não encontrado"
          fi
        done