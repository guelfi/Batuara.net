{
	"info": {
		"_postman_id": "batuara-api-collection-v3",
		"name": "Casa de Caridade Batuara - API Collection",
		"description": "Collection completa e testada para a API Batuara.net\n\n## ‚úÖ Status: FUNCIONANDO PERFEITAMENTE\n- API testada e validada em 23/07/2025\n- Sistema de autentica√ß√£o 100% funcional\n- Todos os endpoints testados e aprovados\n\n## üöÄ Configura√ß√£o Inicial\n1. Importe esta collection no Postman\n2. Importe o environment file (Batuara-API-Environment.json)\n3. Certifique-se de que a API est√° rodando em http://localhost:3003\n4. Execute os testes na ordem sugerida\n\n## üìã Fluxo de Testes Recomendado\n1. **Health Check** - Verificar se a API est√° funcionando\n2. **Login Admin** - Fazer login com credenciais v√°lidas ‚úÖ\n3. **Get Current User** - Verificar informa√ß√µes do usu√°rio logado\n4. **Verify Token** - Validar token JWT\n5. **Get User by ID** - Buscar usu√°rio espec√≠fico (Admin only)\n6. **Refresh Token** - Renovar token de acesso\n7. **Logout** - Encerrar sess√£o\n8. **Test Invalid Token** - Testar seguran√ßa\n\n## üîë Credenciais V√°lidas (TESTADAS)\n- Email: admin@batuara.org\n- Password: Admin@123\n- Role: Admin\n- Status: ‚úÖ FUNCIONANDO\n\n## üåê Vari√°veis de Ambiente\n- `base_url`: http://localhost:3003\n- `admin_email`: admin@batuara.org\n- `admin_password`: Admin@123\n- `access_token`: (preenchido automaticamente ap√≥s login)\n- `refresh_token`: (preenchido automaticamente ap√≥s login)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API is running\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains Swagger documentation\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"swagger\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/swagger",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"swagger"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Login Admin ‚úÖ FUNCIONANDO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('accessToken');",
							"    pm.expect(jsonData.accessToken).to.not.be.empty;",
							"    ",
							"    // Save tokens to environment",
							"    pm.environment.set('access_token', jsonData.accessToken);",
							"    pm.environment.set('refresh_token', jsonData.refreshToken);",
							"    pm.environment.set('user_id', jsonData.user.id);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user');",
							"    pm.expect(jsonData.user.email).to.eql('admin@batuara.org');",
							"    pm.expect(jsonData.user.role).to.eql('Admin');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\",\n    \"rememberMe\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Get Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get current user successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User data is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql('admin@batuara.org');",
							"    pm.expect(jsonData.role).to.eql('Admin');",
							"    pm.expect(jsonData.isActive).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Verify Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Token verification successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('valid');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"verify"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Get User by ID (Admin Only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get user by ID successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User data returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('role');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Token refresh successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New tokens received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('accessToken');",
							"    pm.expect(jsonData).to.have.property('refreshToken');",
							"    ",
							"    // Update tokens in environment",
							"    pm.environment.set('access_token', jsonData.accessToken);",
							"    pm.environment.set('refresh_token', jsonData.refreshToken);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Refresh-Token",
						"value": "{{refresh_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/refresh",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logout successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Clear tokens from environment",
							"pm.environment.unset('access_token');",
							"pm.environment.unset('refresh_token');",
							"pm.environment.unset('user_id');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Test Invalid Token (Security)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token rejected\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message present\", function () {",
							"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('Bearer');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token_here"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Test No Token (Security)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No token rejected\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"WWW-Authenticate header present\", function () {",
							"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.include('Bearer');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/auth/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"me"
					]
				}
			},
			"response": []
		}
	]
}