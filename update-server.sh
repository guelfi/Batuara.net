#!/bin/bash

echo "üîÑ ATUALIZA√á√ÉO AUTOM√ÅTICA DO SERVIDOR BATUARA"
echo "============================================="
echo "Data: $(date)"
echo "Servidor: $(hostname)"
echo ""

# Definir diret√≥rio do projeto
PROJECT_DIR="/var/www/batuara_net"

# Verificar se estamos no diret√≥rio correto
if [ ! -d "$PROJECT_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR"
    echo "Execute este script no servidor Oracle onde o projeto est√° instalado."
    exit 1
fi

# Navegar para o diret√≥rio do projeto
echo "üìÅ Navegando para o diret√≥rio do projeto..."
cd "$PROJECT_DIR" || {
    echo "‚ùå Erro: N√£o foi poss√≠vel acessar o diret√≥rio $PROJECT_DIR"
    exit 1
}

echo "‚úÖ Diret√≥rio atual: $(pwd)"
echo ""

# Mostrar status atual do Git
echo "üìã Status atual do reposit√≥rio:"
git status --porcelain
echo ""

# Fazer backup de mudan√ßas locais se existirem
echo "üíæ Verificando mudan√ßas locais..."
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  Encontradas mudan√ßas locais n√£o commitadas."
    echo "Fazendo backup (stash) das mudan√ßas locais..."
    git stash push -m "Auto-backup antes da atualiza√ß√£o $(date)"
    echo "‚úÖ Backup das mudan√ßas locais criado"
else
    echo "‚úÖ Nenhuma mudan√ßa local encontrada"
fi
echo ""

# Baixar atualiza√ß√µes do reposit√≥rio
echo "üì• Baixando atualiza√ß√µes do GitHub..."
echo "Reposit√≥rio: $(git remote get-url origin)"
echo "Branch atual: $(git branch --show-current)"
echo ""

if git pull origin master; then
    echo "‚úÖ Atualiza√ß√µes baixadas com sucesso!"
    
    # Mostrar o que foi atualizado
    echo ""
    echo "üìÑ Arquivos atualizados:"
    git log --oneline -5 --pretty=format:"  %h - %s (%cr)"
    echo ""
    
else
    echo "‚ùå Erro ao baixar atualiza√ß√µes do reposit√≥rio"
    echo "Poss√≠veis causas:"
    echo "- Problema de conex√£o com a internet"
    echo "- Conflitos de merge"
    echo "- Problemas de autentica√ß√£o"
    echo ""
    echo "üîß Para resolver manualmente:"
    echo "git status"
    echo "git pull origin master"
    exit 1
fi
echo ""

# Verificar se h√° scripts execut√°veis novos
echo "üîß Verificando scripts dispon√≠veis..."
SCRIPTS=(
    "deploy-assets-fix.sh"
    "diagnose-assets.sh" 
    "fix-favicon-complete.sh"
    "deploy.sh"
    "setup-database.sh"
)

echo "Scripts encontrados:"
for script in "${SCRIPTS[@]}"; do
    if [ -f "$script" ]; then
        chmod +x "$script" 2>/dev/null
        echo "  ‚úÖ $script (execut√°vel)"
    else
        echo "  ‚ùå $script (n√£o encontrado)"
    fi
done
echo ""

# Verificar status dos containers
echo "üê≥ Status atual dos containers:"
if command -v docker >/dev/null 2>&1; then
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep batuara || echo "Nenhum container Batuara rodando"
else
    echo "Docker n√£o encontrado"
fi
echo ""

# Sugerir pr√≥ximos passos
echo "üéØ PR√ìXIMOS PASSOS SUGERIDOS:"
echo "=============================="
echo ""
echo "Para aplicar corre√ß√µes de assets:"
echo "  ./deploy-assets-fix.sh"
echo ""
echo "Para diagn√≥stico completo:"
echo "  ./diagnose-assets.sh"
echo ""
echo "Para deploy completo:"
echo "  ./deploy.sh"
echo ""
echo "Para verificar logs dos containers:"
echo "  docker logs batuara-public-website"
echo "  docker logs batuara-admin-dashboard"
echo ""
echo "‚úÖ Atualiza√ß√£o do servidor conclu√≠da!"
echo "============================================="