# Dockerfile otimizado para frontends React (Create React App)
FROM node:20-alpine AS build

WORKDIR /app

# Copia arquivos de dependências
COPY src/Frontend/PublicWebsite/package*.json ./

# Instala dependências
RUN npm ci --only=production

# Copia código fonte
COPY src/Frontend/PublicWebsite/ ./

# Debug: Verificar estrutura copiada
RUN echo "=== ESTRUTURA COPIADA ===" && ls -la && echo "=== PUBLIC FOLDER ===" && ls -la public/ || echo "Public folder not found"

# Argumento para URL da API
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Build da aplicação
RUN npm run build

# Copiar assets críticos para a raiz do build
RUN echo "=== COPIANDO ASSETS CRÍTICOS ===" && \
    if [ -f "public/batuara_logo.png" ]; then \
        cp public/batuara_logo.png build/batuara_logo.png; \
        echo "✅ Logo copiado para build/batuara_logo.png"; \
    else \
        echo "❌ Logo não encontrado em public/batuara_logo.png"; \
    fi && \
    if [ -f "public/favicon.ico" ]; then \
        cp public/favicon.ico build/favicon.ico; \
        echo "✅ Favicon.ico copiado para build/favicon.ico"; \
    else \
        echo "❌ Favicon.ico não encontrado em public/favicon.ico"; \
    fi && \
    if [ -f "public/favicon.png" ]; then \
        cp public/favicon.png build/favicon.png; \
        echo "✅ Favicon.png copiado para build/favicon.png"; \
    else \
        echo "⚠️ Favicon.png não encontrado em public/favicon.png"; \
    fi

# Estágio de produção
FROM nginx:stable-alpine

# Copia arquivos buildados
COPY --from=build /app/build /usr/share/nginx/html

# Verificar se os assets críticos estão presentes
RUN echo "=== VERIFICANDO ASSETS CRÍTICOS ===" && \
    ls -la /usr/share/nginx/html/ && \
    echo "=== VERIFICANDO FAVICON ===" && \
    if [ -f "/usr/share/nginx/html/favicon.ico" ]; then \
        echo "✅ favicon.ico encontrado"; \
        ls -la /usr/share/nginx/html/favicon.ico; \
    else \
        echo "❌ favicon.ico NÃO encontrado"; \
    fi && \
    echo "=== VERIFICANDO LOGO ===" && \
    if [ -f "/usr/share/nginx/html/batuara_logo.png" ]; then \
        echo "✅ batuara_logo.png encontrado"; \
        ls -la /usr/share/nginx/html/batuara_logo.png; \
    else \
        echo "❌ batuara_logo.png NÃO encontrado"; \
    fi

# Criar configuração nginx otimizada
RUN echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '    listen 80;' >> /etc/nginx/conf.d/default.conf && \
    echo '    server_name localhost;' >> /etc/nginx/conf.d/default.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    index index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuração específica para favicon.ico' >> /etc/nginx/conf.d/default.conf && \
    echo '    location = /favicon.ico {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri =404;' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Content-Type "image/x-icon";' >> /etc/nginx/conf.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuração específica para logo' >> /etc/nginx/conf.d/default.conf && \
    echo '    location = /batuara_logo.png {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri =404;' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Content-Type "image/png";' >> /etc/nginx/conf.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuração para assets estáticos' >> /etc/nginx/conf.d/default.conf && \
    echo '    location ~* \.(png|jpg|jpeg|gif|ico|svg|css|js|woff|woff2|ttf|eot)$ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri =404;' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/conf.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuração para arquivos estáticos do build' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /static/ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri =404;' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/conf.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuração para SPA (deve ser a última)' >> /etc/nginx/conf.d/default.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires -1;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "no-cache, no-store, must-revalidate";' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

# Verificar se a configuração foi criada corretamente
RUN echo "=== CONFIGURAÇÃO NGINX CRIADA ===" && cat /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]