#!/bin/bash

# Migration Handler para Entity Framework
# Gerencia migrations de forma mais robusta

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SUCCESS="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"

log_info() { echo -e "${INFO} ${BLUE}$1${NC}"; }
log_success() { echo -e "${SUCCESS} ${GREEN}$1${NC}"; }
log_warning() { echo -e "${WARNING} ${YELLOW}$1${NC}"; }
log_error() { echo -e "${ERROR} ${RED}$1${NC}"; }

# Verificar se dotnet ef está disponível
check_dotnet_ef() {
    log_info "Verificando dotnet ef tools..."
    
    if docker-compose run --rm api dotnet tool list -g | grep -q "dotnet-ef"; then
        log_success "dotnet-ef já está instalado"
        return 0
    else
        log_info "Instalando dotnet-ef tools..."
        if docker-compose run --rm api dotnet tool install --global dotnet-ef; then
            log_success "dotnet-ef instalado com sucesso"
            return 0
        else
            log_error "Falha ao instalar dotnet-ef"
            return 1
        fi
    fi
}

# Verificar migrations pendentes
check_pending_migrations() {
    log_info "Verificando migrations pendentes..."
    
    # Listar migrations aplicadas
    local applied_migrations=$(docker-compose run --rm api dotnet ef migrations list --project src/Backend/Batuara.API 2>/dev/null | grep -c "Applied")
    
    # Listar todas as migrations
    local total_migrations=$(docker-compose run --rm api dotnet ef migrations list --project src/Backend/Batuara.API 2>/dev/null | grep -c "20")
    
    log_info "Migrations aplicadas: $applied_migrations"
    log_info "Total de migrations: $total_migrations"
    
    if [ "$applied_migrations" -lt "$total_migrations" ]; then
        log_warning "Existem migrations pendentes"
        return 1
    else
        log_success "Todas as migrations estão aplicadas"
        return 0
    fi
}

# Gerar nova migration se necessário
generate_migration_if_needed() {
    log_info "Verificando se nova migration é necessária..."
    
    # Tentar iniciar API para detectar pending changes
    docker-compose up -d api
    sleep 10
    
    if docker logs batuara-api 2>&1 | grep -q "PendingModelChangesWarning"; then
        log_warning "Modelo tem mudanças pendentes, gerando nova migration..."
        
        # Parar API
        docker-compose stop api
        
        # Gerar nova migration
        local migration_name="AutoGenerated_$(date +%Y%m%d_%H%M%S)"
        
        if docker-compose run --rm api dotnet ef migrations add "$migration_name" --project src/Backend/Batuara.API; then
            log_success "Nova migration '$migration_name' gerada"
            return 0
        else
            log_error "Falha ao gerar nova migration"
            return 1
        fi
    else
        log_success "Nenhuma migration adicional necessária"
        return 0
    fi
}

# Aplicar migrations
apply_migrations() {
    log_info "Aplicando migrations do Entity Framework..."
    
    # Parar API se estiver rodando
    docker-compose stop api
    
    # Aplicar migrations
    if docker-compose run --rm api dotnet ef database update --project src/Backend/Batuara.API; then
        log_success "Migrations aplicadas com sucesso"
        return 0
    else
        log_error "Falha ao aplicar migrations"
        return 1
    fi
}

# Verificar integridade do banco após migrations
verify_migration_success() {
    log_info "Verificando integridade do banco após migrations..."
    
    # Verificar se tabela de migrations existe
    local migrations_table=$(docker exec batuara-db psql -U batuara_user -d batuara_db -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = '__EFMigrationsHistory';" 2>/dev/null | tr -d ' ')
    
    if [ "$migrations_table" -eq 1 ]; then
        log_success "Tabela de migrations encontrada"
        
        # Contar migrations aplicadas
        local applied_count=$(docker exec batuara-db psql -U batuara_user -d batuara_db -t -c "SELECT COUNT(*) FROM \"__EFMigrationsHistory\";" 2>/dev/null | tr -d ' ')
        log_info "Migrations aplicadas no banco: $applied_count"
        
        return 0
    else
        log_error "Tabela de migrations não encontrada"
        return 1
    fi
}

# Rollback em caso de erro
rollback_migrations() {
    log_warning "Executando rollback de migrations..."
    
    # Listar migrations para encontrar a anterior
    local last_migration=$(docker-compose run --rm api dotnet ef migrations list --project src/Backend/Batuara.API 2>/dev/null | tail -2 | head -1 | awk '{print $1}')
    
    if [ -n "$last_migration" ]; then
        log_info "Fazendo rollback para migration: $last_migration"
        docker-compose run --rm api dotnet ef database update "$last_migration" --project src/Backend/Batuara.API
    else
        log_warning "Nenhuma migration anterior encontrada para rollback"
    fi
}

# Função principal do handler de migrations
handle_migrations() {
    log_info "🔄 Iniciando handler de migrations..."
    
    # Verificar ferramentas
    if ! check_dotnet_ef; then
        return 1
    fi
    
    # Gerar migration se necessário
    if ! generate_migration_if_needed; then
        log_error "Falha ao gerar migration"
        return 1
    fi
    
    # Aplicar migrations
    if ! apply_migrations; then
        log_error "Falha ao aplicar migrations, tentando rollback..."
        rollback_migrations
        return 1
    fi
    
    # Verificar sucesso
    if ! verify_migration_success; then
        log_error "Falha na verificação de integridade"
        return 1
    fi
    
    log_success "🎉 Handler de migrations concluído com sucesso!"
    return 0
}

# Executar se chamado diretamente
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    handle_migrations "$@"
fi